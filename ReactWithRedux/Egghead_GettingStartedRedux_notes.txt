Egghead: Dan Abramov -- Learning Redux with React

Principles:

1: simple or complex - state is represented as a JavaScript object
	all state changes are explicit (you can log state change to the console to see clearly)

2: The state tree is read only - you must dispatch an action to change the state
	action object can have anything but it MUST have a 'type' property ideally with a string value	ex: [object Object] {
		type: "INCREMENT"
      	       }


[Video 3:]

Pure VS Impure Functions

	Pure: depends on the value of their args (do not have observable side effects such as network or database calls) same value goes in same result always
	Impure: may call db or network, have sideeffects, operate on the DOM, overwrite values Some (f)s need to be pure in React

previous state and next state :
	state mutations should be pure taking previous state and action being dispatched
	does not modify state given to it and instead returns a new object

3: State mutations -- function that takes previous, next and vals and returns appropriate info --> these are Reducers

[Video 5]
REDUCERS

function counter(state, action) {
	if (typeOf state === 'undefined') 
	if (action.type === 'INCREMENT') return state + 1
	else if (action.type === 'DECREMENT') return state - 1
	else return state
}
